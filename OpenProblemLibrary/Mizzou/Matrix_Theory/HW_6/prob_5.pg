# DESCRIPTION
# Diagonalize the two given matrices.
# ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Matrix factorizations)
## DBsection(Diagonalization)
## Institution(University of Missouri-Columbia)
## Author(Rick Lynch)
## Level(3)
## MO(1)
## KEYWORDS('matrices', 'diagonalization')


###########################################################################
# initialization 
###########################################################################
DOCUMENT();
loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "contextFraction.pl",
  "parserMultiAnswer.pl",
  "PGmatrixmacros.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;


###########################################################################
# setup contexts and variables 
###########################################################################
#Context("Fraction-NoDecimals");
Context("Fraction");
Context()->flags->set( reduceConstants => 0, reduceConstantFunctions => 0);

### Part (a)
### Matrix of form [[a,b,b], [b,c,d], [b,d,c]]
$a_1 = random(-7,7,2);
$b_1 = random(-1,1,2);
do {$c_1 = non_zero_random(-7,7)} until (abs($c_1) != abs($a_1) && $c_1 != $b_1);
$p_1 = random(-1,1,2);
$d_1 = $p_1 + $a_1 - $c_1;

#eigenvalues
$e1_1 = $c_1 - $d_1;
$e2_1 = Fraction($a_1+$c_1+$d_1-3,2);
$e3_1 = Fraction($a_1+$c_1+$d_1+3,2);

$q11_1 = 0;
$q21_1 = Formula("-1/sqrt(2)");
$q31_1 = Formula("1/sqrt(2)");
if ($p_1 == 1) {
  $q12_1 = ($b_1 == 1) ? Formula("-sqrt(6)/3") : Formula("sqrt(6)/3");
  $q22_1 = Formula("sqrt(6)/6");
  $q32_1 = Formula("sqrt(6)/6");
  $q13_1 = ($b_1 == -1) ? Formula("-sqrt(3)/3") : Formula("sqrt(3)/3");
  $q23_1 = Formula("sqrt(3)/3");
  $q33_1 = Formula("sqrt(3)/3");
} else {
  $q13_1 = ($b_1 == -1) ? Formula("-sqrt(6)/3") : Formula("sqrt(6)/3");
  $q23_1 = Formula("sqrt(6)/6");
  $q33_1 = Formula("sqrt(6)/6");
  $q12_1 = ($b_1 == 1) ? Formula("-sqrt(3)/3") : Formula("sqrt(3)/3");
  $q22_1 = Formula("sqrt(3)/3");
  $q32_1 = Formula("sqrt(3)/3");
}


### Part (b)
### Matrix of form [[a,b,-b],[b,c,-c],[-b,-c,c]]
do {
  $a_2 = random(-8,8,2);
  $b_2 = list_random(-2,2);
  do {$p_2 = list_random(-2,2)} until ($p_2 != $a_2);
  $c_2 = ($a_2-$p_2)/2;
} until (abs($c_2) != abs($b_2));

#eigenvalues
$e1_2 = 0;
$e2_2 = Fraction($a_2 + 2*$c_2 - 6,2);
$e3_2 = Fraction($a_2 + 2*$c_2 + 6,2);

$q11_2 = 0;
$q21_2 = Formula("1/sqrt(2)");
$q31_2 = Formula("1/sqrt(2)");
if ($p_2 == 2) {
  $q12_2 = ($b_2 == 2) ? Formula("sqrt(3)/3") : Formula("-sqrt(3)/3");
  $q22_2 = Formula("-sqrt{3}/3");
  $q32_2 = Formula("sqrt(3)/3");
  $q13_2 = ($b_2 == 2) ? Formula("-sqrt(6)/3") : Formula("sqrt(6)/3");
  $q23_2 = Formula("-sqrt(6)/6");
  $q33_2 = Formula("sqrt{6}/6");
} else {
  $q12_2 = ($b_2 == 2) ? Formula("sqrt(6)/3") : Formula("-sqrt(6)/3");
  $q22_2 = Formula("-sqrt(6)/6");
  $q32_2 = Formula("sqrt(6)/6");
  $q13_2 = ($b_2 == 2) ? Formula("-sqrt(3)/3") : Formula("sqrt(3)/3");
  $q23_2 = Formula("-sqrt(3)/3");
  $q33_2 = Formula("sqrt(3)/3");
}


Context("Matrix")->normalStrings;
$I = Value::Matrix->I(3);

$Q_1 = Matrix([$q11_1 , $q12_1 , $q13_1], [$q21_1 , $q22_1 , $q23_1], [$q31_1 , $q32_1 , $q33_1]);
$D_1 = Matrix([$e1_1 , 0 , 0 ], [0, $e2_1 , 0], [0 , 0 , $e3_1 ]);

$Q_2 = Matrix([$q11_2 , $q12_2 , $q13_2], [$q21_2 , $q22_2 , $q23_2 ], [$q31_2 , $q32_2 , $q33_2 ]);
$D_2 = Matrix([$e1_2 , 0 , 0 ], [0 , $e2_2 , 0], [0 , 0 , $e3_2 ]);

$A_1 = Matrix([$a_1,$b_1,$b_1],[$b_1,$c_1,$d_1],[$b_1,$d_1,$c_1]);
$ans_1 = MultiAnswer($q11_1, $q12_1, $q13_1, $q21_1, $q22_1, $q23_1, $q31_1, $q32_1, $q33_1, $e1_1, $e2_1, $e3_1)->with(
  singleResult => 1,
  checkTypes => 1,
  format => "Q=(%s, %s, %s)$BR (%s, %s, %s)$BR (%s, %s, %s)$BR D=(%s, 0, 0)$BR (0, %s, 0)$BR (0, 0, %s)",
  tex_format => "Q= \left[\begin{array}{ccc} %s & %s & %s \\ %s &  %s & %s \\ %s & %s & %s \end{array}\right] ,\   D = \left[\begin{array}{ccc} %s & 0 & 0 \\ 0 &  %s & 0 \\ 0 & 0 & %s \end{array}\right]",
  checker => sub {
    my ($cor, $std, $self) = @_;
    my @QD_r = @{$std};
    my $Q = Matrix([$QD_r[0],$QD_r[1], $QD_r[2]], [$QD_r[3], $QD_r[4], $QD_r[5]],  [$QD_r[6], $QD_r[7], $QD_r[8]]);
    my $D = Matrix([$QD_r[9], 0, 0], [0, $QD_r[10], 0], [0, 0, $QD_r[11]]);
    if ($Q->det == Real(0)){ Value->Error("Your Q isn't invertible"); }
    if ($Q * ($Q->transpose) != $I){ Value->Error("Your Q isn't orthogonal");}
    if ( $A_1 == $Q*$D*($Q->transpose)) { return (1); }
    else { Value->Error("\(A\) must equal \(QDQ^T\) ")};
  }
);

$A_2 = Matrix([$a_2,$b_2,-$b_2],[$b_2,$c_2,-$c_2],[-$b_2,-$c_2,$c_2]);
$ans_2 = MultiAnswer($q11_2, $q12_2, $q13_2, $q21_2, $q22_2, $q23_2, $q31_2, $q32_2, $q33_2, $e1_2, $e2_2, $e3_2)->with(
  singleResult => 1,
  checkTypes => 1,
  format => "Q=(%s, %s, %s)$BR (%s, %s, %s)$BR (%s, %s, %s)$BR D=(%s, 0, 0)$BR (0, %s, 0)$BR (0, 0, %s)",
  tex_format => "Q= \left[\begin{array}{ccc} %s & %s & %s \\ %s &  %s & %s \\ %s & %s & %s \end{array}\right] ,\   D = \left[\begin{array}{ccc} %s & 0 & 0 \\ 0 &  %s & 0 \\ 0 & 0 & %s \end{array}\right]",
  checker => sub {
    my ($cor, $std, $self) = @_;
    my @QD_r = @{$std};
    my $Q = Matrix([$QD_r[0],$QD_r[1], $QD_r[2]], [$QD_r[3], $QD_r[4], $QD_r[5]],  [$QD_r[6], $QD_r[7], $QD_r[8]]);
    my $D = Matrix([$QD_r[9], 0, 0], [0, $QD_r[10], 0], [0, 0, $QD_r[11]]);
    if ($Q->det == 0){ Value->Error("Your Q isn't invertible"); }
    if ($Q * ($Q->transpose) != $I){ Value->Error("Your Q isn't orthogonal");}
    if ( $A_2 == $Q*$D*($Q->transpose)) { return (1); }
    else { Value->Error("\(A\) must equal \(QDQ^T\) ")};
  }
);


###########################################################################
# state the problem 
###########################################################################
Context()->texStrings;
BEGIN_TEXT
For each of the following, factor the matrix \(A\) into a product \(QDQ^{T}\) where \(Q\) is orthogonal and \(D\) is diagonal.
$PAR
(a) \(A = $A_1\)
$PAR
\{ mbox( '\(Q=\)',
	 display_matrix(
		[[ $ans_1->ans_rule(8), $ans_1->ans_rule(8), $ans_1->ans_rule(8) ],
                 [ $ans_1->ans_rule(8), $ans_1->ans_rule(8), $ans_1->ans_rule(8) ],
                 [ $ans_1->ans_rule(8), $ans_1->ans_rule(8), $ans_1->ans_rule(8) ]]),
	 '\(\qquad D=\)',
	 display_matrix(
		[[ $ans_1->ans_rule(8), 0, 0 ],
                 [ 0, $ans_1->ans_rule(8), 0 ],
                 [ 0, 0, $ans_1->ans_rule(8) ]]),
) \}
$PAR 
(b) \(A = $A_2\)
$PAR
\{ mbox( '\(Q=\)',
	 display_matrix(
		[[ $ans_2->ans_rule(8), $ans_2->ans_rule(8), $ans_2->ans_rule(8) ],
                 [ $ans_2->ans_rule(8), $ans_2->ans_rule(8), $ans_2->ans_rule(8) ],
                 [ $ans_2->ans_rule(8), $ans_2->ans_rule(8), $ans_2->ans_rule(8) ]]),
	 '\(\qquad D=\)',
	 display_matrix(
		[[ $ans_2->ans_rule(8), 0, 0 ],
                 [ 0, $ans_2->ans_rule(8), 0 ],
                 [ 0, 0, $ans_2->ans_rule(8) ]]),
) \}
END_TEXT


###########################################################################
# check the answer  
###########################################################################
ANS($ans_1->cmp());
ANS($ans_2->cmp());

BEGIN_SOLUTION
  ${BBOLD}Solution:${EBOLD} Note that each given matrix is symmetric so we know that they can be factored as \(QDQ^{T}\) where \(Q\) is orthogonal and \(D\) is diagonal. To find \(Q\) and \(D\), first find the eigenvalues of \(A\) and then find an orthonormal basis for \(\mathbb{R}^3\) consisting of eigenvectors to get
$PAR $BR
(a) \(Q = $Q_1\) $SPACE \(D = $D_1\)
$PAR 
(b) \(Q = $Q_2\) $SPACE \(D = $D_2\)
$PAR
END_SOLUTION
Context()->normalStrings;

# Created in 2012. 
# Desc: Diagonalize the two given matrices.
ENDDOCUMENT();
