## DESCRIPTION
## Linear Algebra
## ENDDESCRIPTION

## DBsubject(Linear algebra)
## DBchapter(Euclidean spaces)
## DBsection(Row, column, and null spaces)
## Date(March 2016)
## Institution(Hope College)
## Author(Paul Pearson)
## Level(3)
## MO(1)

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "VectorListCheckers.pl",
  "PGchoicemacros.pl",
  "parserPopUp.pl",
  "parserMultiAnswer.pl",  # for basis coefficients
  "parserPopUp.pl",
  "PGcourse.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

Context('Matrix');

do {
  ($a,$b,$c,$d) = (non_zero_random(-5,5,1),non_zero_random(-5,5,1),non_zero_random(-5,5,1),non_zero_random(-5,5,1));
} until ($a != $b  &&  $a != $c  &&  $c != $d  &&  $b != $d);

$rrefA = Matrix([
[1,0,$a,$b],
[0,1,$c,$d],
[0,0,0,0]
]);

Context()->variables->are(
'a1'=>['Vector3D','TeX'=>'\mathbf{a_1}'],
'a2'=>['Vector3D','TeX'=>'\mathbf{a_2}'],
'a3'=>['Vector3D','TeX'=>'\mathbf{a_3}'],
'a4'=>['Vector3D','TeX'=>'\mathbf{a_4}'],
);

# pull the column vectors into variables
my ($a1,$a2,$a3,$a4) = (
        Vector($rrefA->column(1)),
        Vector($rrefA->column(2)),
        Vector($rrefA->column(3)),
        Vector($rrefA->column(4))
    );
my $zero = Vector(0,0,0);
    
    
$list_checker = sub {
  my ($correct, $student, $ansHash, $value) = @_;

  # loop through the student list and parse any formulas in the student response
  my $parsed_student = [];
  foreach my $el (@$student) {
    my $parsed_el = $el;
    # Mark any answer involving explicit nonzero vectors as incorrect
    if ($el->eval(a1=>$zero,a2=>$zero,a3=>$zero,a4=>$zero) != $zero) {
        return 0;
    }
    $parsed_el = $el->eval(a1=>$a1,a2=>$a2,a3=>$a3,a4=>$a4);
    push @$parsed_student, $parsed_el;
  }

  # return the results of the current answer checker called with the parsed array
  return basis_checker_list_of_vectors([$a1, $a2], $parsed_student, $ansHash, $value);
};


$mc = new_checkbox_multiple_choice();
$mc -> qa (
"Question goes here", 
"\( \lbrace \mathbf{a_1}, \mathbf{a_2}, \mathbf{a_3}, \mathbf{a_4} \rbrace \) is ${BBOLD}not${EBOLD} a basis for \( \mathbb{R}^3 \)",
"\( \lbrace \mathbf{a_1}, \mathbf{a_2} \rbrace \) is a linearly independent set",
);
$mc -> extra(
"\( \mathrm{span} \lbrace \mathbf{a_1}, \mathbf{a_2}, \mathbf{a_3}, \mathbf{a_4} \rbrace = \mathbb{R}^3 \)",
"\( \lbrace \mathbf{a_1}, \mathbf{a_2}, \mathbf{a_3} \rbrace \) is a linearly independent set",
"\( \lbrace \mathbf{a_1}, \mathbf{a_2}, \mathbf{a_3}, \mathbf{a_4} \rbrace \) is a linearly independent set",
"\( \lbrace \mathbf{a_1}, \mathbf{a_2}, \mathbf{a_3}, \mathbf{a_4} \rbrace \) is a basis for \( \mathbb{R}^3 \)",
"\( \mathrm{span} \lbrace \mathbf{a_1}, \mathbf{a_2} \rbrace = \mathbb{R}^3 \)",
"\( \mathbf{a_1} \) and \( \mathbf{a_2} \) are in the null space of \( A \)",
);
#$mc -> makeLast("None of the above");

$ans3 = Compute("$a a1 + $c a2")->cmp(
  checker => sub{
    my($correct,$student,$ansHash) = @_;
    # Only answers in terms of a1 and a2 are allowed
    foreach my $var (keys %{$student->{variables}}) {
      Value::Error("You are not allowed to use '$var' in this answer.") if !(grep $_ eq $var,  ('a1','a2'));
    }
    if ($student->eval(a1=>$zero,a2=>$zero,a3=>$zero,a4=>$zero) != $zero) {
      Value::Error("You are only allowed to use linear combinations of 'a1' and 'a2' in this answer.");
    }
    return $correct == $student;
  }
);

$ans4 = Compute("$b a1 + $d a2")->cmp(
  checker => sub{
    my($correct,$student,$ansHash) = @_;
    # Only answers in terms of a1, a2 and a3 are allowed
    foreach my $var (keys %{$student->{variables}}) {
      Value::Error("You are not allowed to use '$var' in this answer.") if !(grep $_ eq $var,  ('a1','a2','a3'));
    }
    if ($student->eval(a1=>$zero,a2=>$zero,a3=>$zero,a4=>$zero) != $zero) {
      Value::Error("You are only allowed to use linear combinations of 'a1', 'a2' and 'a3' in this answer.");
    }
    return $a4 == $student->eval(a1=>$a1,a2=>$a2,a3=>$a3);
  }
);

$popup1 = PopUp(['?', '1','2','3','4','R','R^2','R^3','R^4'],'R^3');
$popup2 = PopUp(['?', '1','2','3','4','R','R^2','R^3','R^4'],'R^4');


$x1 = Vector(-1*$a, -1*$c, 1, 0);
$x2 = Vector(-1*$b, -1*$d, 0, 1);

BEGIN_PGML
Suppose [` \mathbf{a_1} `], [` \mathbf{a_2} `], [` \mathbf{a_3} `], and [` \mathbf{a_4} `] are vectors in [` \mathbb{R}^3 `], 
[` A = (\mathbf{a_1} \mid \mathbf{a_2} \mid \mathbf{a_3} \mid \mathbf{a_4} ) `], and 

>> [`` \mathrm{rref}(A) = [$rrefA] ``] <<

a. Select all of the true statements (there may be more than one correct answer). [@ ANS( checkbox_cmp($mc->correct_ans) ); $mc->print_a; @]***

b. If possible, write [` \mathbf{a_3} `] as a linear combination of [` \mathbf{a_1} `] and [` \mathbf{a_2} `]; otherwise, enter [| DNE |].  Enter [| a1 |] for [` \mathbf{a_1} `], etc.

    [` \mathbf{a_3} = `] [_________________]{$ans3}

c. If possible, write [` \mathbf{a_4} `] as a linear combination of [` \mathbf{a_1} `], [` \mathbf{a_2} `], and  [` \mathbf{a_3} `]; otherwise, enter [| DNE |].

    [` \mathbf{a_4} = `] [_________________]{$ans4}

d. The dimension of the column space of [` A `] is [_____]{"2"}, and the column space of [` A `] is a subspace of [@ ANS($popup1->cmp); $popup1->menu; @]*.

e. Find a basis for the column space of [` A `]. Enter your answer as a comma separated list of vectors.
If necessary, enter [| a1 |] for [` \mathbf{a_1} `], etc., or enter coordinate vectors of the form [| <1,2,3> |] or [| <1,2,3,4,5> |].

    A basis for the column space of [`A`] is [`\big\lbrace`] [_________________________]{List(a1, a2)->cmp(list_checker=>$list_checker)} [`\big\rbrace`]

f. The dimension of the null space of [` A `] is [_____]{"2"}, and the null space of [` A `] is a subspace of [@ ANS($popup2->cmp); $popup2->menu; @]*.

g. Find a basis for the null space of [` A `].  Enter your answer as a comma separated list of vectors of the form [| <a,b,c> |] or [| <a,b,c,d> |] where a,b,... are numbers.

    A basis for the null space of [`A`] is [`\big\lbrace`] [_________________________]{List($x1,$x2)->cmp(list_checker=>~~&basis_checker_list_of_vectors)} [`\big\rbrace`]
END_PGML

COMMENT('Always rank 2');

ENDDOCUMENT();
